.TH neostow 1
.SH NAME
.B neostow
\- the declarative GNU stow(1)
.SH SYNOPSIS
.B neostow
.I [OPTION] [ARGUMENT]
.SH DESCRIPTION
neostow is a tool that streamline the process to manage symlinks like GNU stow(1), but using a neostow file, instead. It allows more flexible symlink management, enabling the creation of symlinks from a relative source to anywhere on your computer.

This declarative nature allows to easily make reproducible and granular symlinking, unlike stow(1). However, this project does not aims to fully replace it, but to give a declarative feature missing from it.

This tool is useful to keep files and directories organized in a single centralized place, while also having them across the system. Differently, than stow(1), which allows you to place some files into a different target, other than the parent directory, neostow aims to further improve this functionality.

With neostow each file or directory can be symlinked to a specific part of the system, and not the project as a whole. There is not ignore file, and no need to adjust the folder layout to achieve your goals. If your `neostow` does not explicitly specify an operation, it won't touch a single file.
.SH COMMANDS
.TP
.B delete
Remove all existing symlinks set in the neostow file.
.TP
.B edit
Edit the neostow file using the default EDITOR.
.SH OPTIONS
.TP
.B -D, --debug
Enables debug verbosity.
.TP
.B -F, --force
Skip prompt dialogs. This will skip a prompt that appears, when the destination is not a symlink.
.TP
.B -V, --verbose
Enable verbosity.
.B -f, --file [FILE]
Load an alternative neostow file.
.TP
.B -d, --dry
Describe potential operations. No symlink or remove operation occurs.
.TP
.B -h, --help
Display the help message and exits.
.TP
.B -o, --overwrite
Overwrite symlinks, if they already exist. If the destination is a file, a prompt will request the user to accept the operation with a diff.
.TP
.B -v, --version
Displays program version.
.SH FILES

The neostow file is defined as .neostow. By default this file will be looked in the current directory, otherwise explicitly located using the -c option.
.TP
.B Syntax

The syntax consists of a source file/directory and a destination file/directory separated by the equal (=) symbol.

It's allowed to use environment variables in the neostow file.

It's possible to set files and directories, which will be infered by the presence of a backslash.

Next, there is a quick example:

neostow/=$HOME/Download/
.TP
.B Source File

The source file is always defined relatively as the .neostow file. So, if the neostow file is at the home directory, to specify the Desktop directory, just type it and make sure to add an ending backslash (/).

.TP
.B Destination File

The destination file must be specified as a absolute path, unlike the source file.

.SH EXAMPLE

Consider the following example for the neostow file located at $HOME/dev/neostow

.B Contents:

github/bmark/src/bmark=$HOME/.local/bin/

github/neostow/src/neostow=$HOME/.local/bin/

codeberg/=$HOME/

To properly use this neostow file, the -f option is required, since the default file is always the .neostow file at the current directly. So, it should be used like neostow -f $HOME/dev/neostow.

.B Expected behaviour:

This example will link bmark and neostow files to .local/bin, and the codeberg directory to the home directory.
.SH SEE ALSO
stow(1)
